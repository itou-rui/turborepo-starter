name: "Deployment Common"

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      app_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      ref_name:
        required: true
        type: string

jobs:
  #############################################################################
  # Build the app and push the Docker image to Artifact Repository            #
  #############################################################################
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      ## Authenticate using the service account set up in `setup-google-cloud.sh`
      - name: Auth GoogleCloud
        id: auth-google-cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.project_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      ## Initially, an Artifact Repository will be created
      - name: Create Artifacts Repository
        run: |
          if gcloud artifacts repositories describe "${{ inputs.repo_name }}" --location="${{ vars.GOOGLE_CLOUD_REGION }}" --project="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"; then
            echo "Artifacts Repository exists"
          else
            gcloud artifacts repositories create ${{ inputs.repo_name }} \
              --repository-format="docker" \
              --location="${{ vars.GOOGLE_CLOUD_REGION }}" \
              --project="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          fi

      - name: Auth Docker
        uses: docker/login-action@v1
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth-google-cloud.outputs.access_token }}"
          registry: "${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev"

      - name: Generate Image
        id: generate_image
        run: |
          IMAGE_NAME="${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app_name }}/${{ inputs.environment }}"
          echo "docker_image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ inputs.app_name }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.generate_image.outputs.docker_image }}:${{ inputs.app_version }}
            ${{ steps.generate_image.outputs.docker_image }}:${{ github.sha }}
            ${{ steps.generate_image.outputs.docker_image }}:latest
          cache-from: type=gha,scope=${{ inputs.app_name }}-${{ inputs.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ inputs.app_name }}-${{ inputs.ref_name }}

      - name: Create Service declaration
        run: |
          ## Application
          if [ "${{ inputs.app_name }}" == "web" ]; then
            ## Web
            echo "There are no environment variables specific to the web."
          fi

          ## Common
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "There are no environment variables specific to the production environment."
          else
            echo "There are no environment variables specific to the development environment."
          fi
          export LOG_FORMAT="json"

          ## System
          export GITHUB_SHA="${{ github.sha }}"
          export CONTAINER_IMAGE="${{ steps.generate_image.outputs.docker_image }}:${{ github.sha }}"
          export CLOUD_RUN_SERVICE_NAME="${{ inputs.project_name }}-${{ inputs.app_name }}-${{ inputs.environment }}"
          export CLOUD_RUN_REVISION_NAME="${{ inputs.project_name }}-${{ inputs.app_name }}-${{ inputs.app_version }}-${GITHUB_SHA::7}"
          export CLOUD_RUN_REVISION_TAG="${{ inputs.environment }}"
          export GOOGLE_CLOUD_PROJECT_ID="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          export GOOGLE_CLOUD_PROJECT_NUMBER="${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}"
          export ENVIRONMENT="${{ inputs.environment }}"
          export CLOUD_RUN_SERVICE_ACCOUNT="${{ inputs.project_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"

          envsubst < ./apps/${{ inputs.app_name }}/service.yaml > service-${{ inputs.environment }}.yaml

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        timeout-minutes: 5
        with:
          service: ${{ steps.setup-vars.outputs.service_name }}-${{ inputs.environment }}
          region: ${{ vars.GOOGLE_CLOUD_REGION }}
          metadata: service-${{ inputs.environment }}.yaml
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
